// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace B3.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct CSPong : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_6(); }
  public static CSPong GetRootAsCSPong(ByteBuffer _bb) { return GetRootAsCSPong(_bb, new CSPong()); }
  public static CSPong GetRootAsCSPong(ByteBuffer _bb, CSPong obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CSPong __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long ServerTick { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public long Tick { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<B3.Protocol.CSPong> CreateCSPong(FlatBufferBuilder builder,
      long ServerTick = 0,
      long Tick = 0) {
    builder.StartTable(2);
    CSPong.AddTick(builder, Tick);
    CSPong.AddServerTick(builder, ServerTick);
    return CSPong.EndCSPong(builder);
  }

  public static void StartCSPong(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddServerTick(FlatBufferBuilder builder, long serverTick) { builder.AddLong(0, serverTick, 0); }
  public static void AddTick(FlatBufferBuilder builder, long tick) { builder.AddLong(1, tick, 0); }
  public static Offset<B3.Protocol.CSPong> EndCSPong(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<B3.Protocol.CSPong>(o);
  }
}


static public class CSPongVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*ServerTick*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 6 /*Tick*/, 8 /*long*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
