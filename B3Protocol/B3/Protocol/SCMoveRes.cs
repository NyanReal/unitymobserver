// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace B3.Protocol
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SCMoveRes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_6(); }
  public static SCMoveRes GetRootAsSCMoveRes(ByteBuffer _bb) { return GetRootAsSCMoveRes(_bb, new SCMoveRes()); }
  public static SCMoveRes GetRootAsSCMoveRes(ByteBuffer _bb, SCMoveRes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SCMoveRes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short UserID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public float X { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Rotation { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<B3.Protocol.SCMoveRes> CreateSCMoveRes(FlatBufferBuilder builder,
      short UserID = 0,
      float X = 0.0f,
      float Y = 0.0f,
      float Z = 0.0f,
      float Rotation = 0.0f) {
    builder.StartTable(5);
    SCMoveRes.AddRotation(builder, Rotation);
    SCMoveRes.AddZ(builder, Z);
    SCMoveRes.AddY(builder, Y);
    SCMoveRes.AddX(builder, X);
    SCMoveRes.AddUserID(builder, UserID);
    return SCMoveRes.EndSCMoveRes(builder);
  }

  public static void StartSCMoveRes(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddUserID(FlatBufferBuilder builder, short userID) { builder.AddShort(0, userID, 0); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(1, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(2, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(3, z, 0.0f); }
  public static void AddRotation(FlatBufferBuilder builder, float rotation) { builder.AddFloat(4, rotation, 0.0f); }
  public static Offset<B3.Protocol.SCMoveRes> EndSCMoveRes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<B3.Protocol.SCMoveRes>(o);
  }
}


static public class SCMoveResVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*UserID*/, 2 /*short*/, 2, false)
      && verifier.VerifyField(tablePos, 6 /*X*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Y*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Z*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Rotation*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
